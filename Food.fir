circuit Food :
  module Fetcher :
    input clock : Clock
    input reset : Reset
    output io : { flip input : UInt<32>[12], instruction : UInt<32>, index : SInt<29>, flip branchIn : SInt<32>, flip shouldMux : UInt<1>, pcOut : SInt<32>, flip branchEnable : UInt<1>}

    reg pcReg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("hfffffffc"))) @[Fetcher.scala 20:22]
    reg instruction : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Fetcher.scala 21:28]
    reg branchEnableReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Fetcher.scala 23:32]
    reg branchInReg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Fetcher.scala 24:28]
    branchInReg <= io.branchIn @[Fetcher.scala 27:15]
    branchEnableReg <= io.branchEnable @[Fetcher.scala 28:19]
    node _pcPlusReg_T = add(pcReg, asSInt(UInt<4>("h4"))) @[Fetcher.scala 32:85]
    node _pcPlusReg_T_1 = tail(_pcPlusReg_T, 1) @[Fetcher.scala 32:85]
    node _pcPlusReg_T_2 = asSInt(_pcPlusReg_T_1) @[Fetcher.scala 32:85]
    node _pcPlusReg_T_3 = mux(io.branchEnable, io.branchIn, _pcPlusReg_T_2) @[Fetcher.scala 32:46]
    node pcPlusReg = mux(io.shouldMux, pcReg, _pcPlusReg_T_3) @[Fetcher.scala 32:22]
    pcReg <= pcPlusReg @[Fetcher.scala 34:8]
    node index = shr(pcPlusReg, 2) @[Fetcher.scala 37:28]
    node _instruction_T = bits(index, 29, 0) @[Fetcher.scala 40:32]
    node _instruction_T_1 = bits(_instruction_T, 3, 0)
    instruction <= io.input[_instruction_T_1] @[Fetcher.scala 40:15]
    io.instruction <= instruction @[Fetcher.scala 42:18]
    io.index <= index @[Fetcher.scala 43:12]
    io.pcOut <= pcReg @[Fetcher.scala 44:12]

  module Decoder :
    input clock : Clock
    input reset : Reset
    output io : { flip instruction : UInt<32>, opcode : UInt<7>, rdOutput : UInt<5>, funct3 : UInt<3>, funct7 : UInt<7>, rs1 : UInt<5>, rs2 : UInt<5>, imm_I : SInt<12>, imm_S : SInt<12>, imm_B : SInt<13>, imm_U : UInt<32>, imm_J : SInt<21>, flip rdRegEx : UInt<5>, flip LoadMemEnable : UInt<1>, flip pcIn : SInt<32>, pcOut : SInt<32>, shouldMux : UInt<1>}

    node poop1 = bits(io.instruction, 19, 15) @[Decoder.scala 33:27]
    node poop2 = bits(io.instruction, 24, 20) @[Decoder.scala 34:29]
    reg instruction : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Decoder.scala 37:28]
    node _loadMemEnable_T = bits(instruction, 6, 0) @[Decoder.scala 38:35]
    node loadMemEnable = eq(_loadMemEnable_T, UInt<2>("h3")) @[Decoder.scala 38:49]
    node _io_shouldMux_T = eq(poop1, io.rdOutput) @[Decoder.scala 41:44]
    node _io_shouldMux_T_1 = eq(poop2, io.rdOutput) @[Decoder.scala 41:71]
    node _io_shouldMux_T_2 = or(_io_shouldMux_T, _io_shouldMux_T_1) @[Decoder.scala 41:61]
    node _io_shouldMux_T_3 = and(loadMemEnable, _io_shouldMux_T_2) @[Decoder.scala 41:33]
    io.shouldMux <= _io_shouldMux_T_3 @[Decoder.scala 41:16]
    reg boolean : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoder.scala 42:24]
    boolean <= io.shouldMux @[Decoder.scala 43:11]
    node muxedInstr = mux(io.shouldMux, UInt<5>("h13"), io.instruction) @[Decoder.scala 44:23]
    reg pcReg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Decoder.scala 48:22]
    pcReg <= io.pcIn @[Decoder.scala 50:9]
    io.pcOut <= io.pcIn @[Decoder.scala 51:12]
    instruction <= muxedInstr @[Decoder.scala 55:15]
    node _io_opcode_T = bits(instruction, 6, 0) @[Decoder.scala 56:27]
    io.opcode <= _io_opcode_T @[Decoder.scala 56:13]
    node _io_rdOutput_T = bits(instruction, 11, 7) @[Decoder.scala 57:33]
    io.rdOutput <= _io_rdOutput_T @[Decoder.scala 57:19]
    node _io_funct3_T = bits(instruction, 14, 12) @[Decoder.scala 58:27]
    io.funct3 <= _io_funct3_T @[Decoder.scala 58:13]
    node _io_rs1_T = bits(instruction, 19, 15) @[Decoder.scala 59:27]
    io.rs1 <= _io_rs1_T @[Decoder.scala 59:13]
    node _io_rs2_T = bits(instruction, 24, 20) @[Decoder.scala 61:27]
    io.rs2 <= _io_rs2_T @[Decoder.scala 61:13]
    node _io_funct7_T = bits(instruction, 31, 25) @[Decoder.scala 62:27]
    io.funct7 <= _io_funct7_T @[Decoder.scala 62:13]
    node _io_imm_I_T = bits(instruction, 31, 20) @[Decoder.scala 63:27]
    node _io_imm_I_T_1 = asSInt(_io_imm_I_T) @[Decoder.scala 63:36]
    io.imm_I <= _io_imm_I_T_1 @[Decoder.scala 63:13]
    node _io_imm_S_T = bits(instruction, 31, 25) @[Decoder.scala 64:29]
    node _io_imm_S_T_1 = shl(_io_imm_S_T, 5) @[Decoder.scala 64:38]
    node _io_imm_S_T_2 = bits(instruction, 11, 7) @[Decoder.scala 64:57]
    node _io_imm_S_T_3 = or(_io_imm_S_T_1, _io_imm_S_T_2) @[Decoder.scala 64:44]
    node _io_imm_S_T_4 = asSInt(_io_imm_S_T_3) @[Decoder.scala 64:66]
    io.imm_S <= _io_imm_S_T_4 @[Decoder.scala 64:13]
    node _io_imm_B_T = bits(instruction, 31, 31) @[Decoder.scala 65:29]
    node _io_imm_B_T_1 = shl(_io_imm_B_T, 12) @[Decoder.scala 65:34]
    node _io_imm_B_T_2 = bits(instruction, 7, 7) @[Decoder.scala 65:55]
    node _io_imm_B_T_3 = shl(_io_imm_B_T_2, 11) @[Decoder.scala 65:59]
    node _io_imm_B_T_4 = or(_io_imm_B_T_1, _io_imm_B_T_3) @[Decoder.scala 65:41]
    node _io_imm_B_T_5 = bits(instruction, 30, 25) @[Decoder.scala 65:80]
    node _io_imm_B_T_6 = shl(_io_imm_B_T_5, 5) @[Decoder.scala 65:89]
    node _io_imm_B_T_7 = or(_io_imm_B_T_4, _io_imm_B_T_6) @[Decoder.scala 65:66]
    node _io_imm_B_T_8 = bits(instruction, 11, 8) @[Decoder.scala 65:109]
    node _io_imm_B_T_9 = shl(_io_imm_B_T_8, 1) @[Decoder.scala 65:117]
    node _io_imm_B_T_10 = or(_io_imm_B_T_7, _io_imm_B_T_9) @[Decoder.scala 65:95]
    node _io_imm_B_T_11 = asSInt(_io_imm_B_T_10) @[Decoder.scala 65:124]
    io.imm_B <= _io_imm_B_T_11 @[Decoder.scala 65:13]
    node _io_imm_U_T = bits(instruction, 31, 12) @[Decoder.scala 66:27]
    io.imm_U <= _io_imm_U_T @[Decoder.scala 66:13]
    node _io_imm_J_T = bits(instruction, 31, 31) @[Decoder.scala 67:30]
    node _io_imm_J_T_1 = shl(_io_imm_J_T, 20) @[Decoder.scala 67:35]
    node _io_imm_J_T_2 = bits(instruction, 19, 12) @[Decoder.scala 67:56]
    node _io_imm_J_T_3 = shl(_io_imm_J_T_2, 12) @[Decoder.scala 67:65]
    node _io_imm_J_T_4 = or(_io_imm_J_T_1, _io_imm_J_T_3) @[Decoder.scala 67:42]
    node _io_imm_J_T_5 = bits(instruction, 20, 20) @[Decoder.scala 67:86]
    node _io_imm_J_T_6 = shl(_io_imm_J_T_5, 11) @[Decoder.scala 67:91]
    node _io_imm_J_T_7 = or(_io_imm_J_T_4, _io_imm_J_T_6) @[Decoder.scala 67:72]
    node _io_imm_J_T_8 = bits(instruction, 30, 21) @[Decoder.scala 67:112]
    node _io_imm_J_T_9 = shl(_io_imm_J_T_8, 1) @[Decoder.scala 67:121]
    node _io_imm_J_T_10 = or(_io_imm_J_T_7, _io_imm_J_T_9) @[Decoder.scala 67:98]
    node _io_imm_J_T_11 = asSInt(_io_imm_J_T_10) @[Decoder.scala 67:129]
    io.imm_J <= _io_imm_J_T_11 @[Decoder.scala 67:13]

  module Executer :
    input clock : Clock
    input reset : Reset
    output io : { flip opcode : UInt<7>, flip rdInput : UInt<5>, flip funct3 : UInt<3>, flip funct7 : UInt<7>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip imm_I : SInt<12>, flip imm_S : SInt<12>, flip imm_B : SInt<13>, flip imm_U : UInt<32>, flip imm_J : SInt<21>, imm : SInt<32>, funct3out : UInt<3>, funct7out : UInt<7>, flip x : SInt<32>[32], flip ALUIn : SInt<32>, group : UInt<2>, operand1 : SInt<32>, operand2 : SInt<32>, flip rdLastRegMemIn : UInt<5>, flip aluLastRegMemIn : SInt<32>, flip rdLoadRegMemIn : UInt<5>, flip aluLoadRegMemIn : SInt<32>, flip loadEnable : UInt<1>, rdOutput : UInt<5>, flip pcIn : SInt<32>, pcOut : SInt<32>}

    reg opcodeReg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Executer.scala 48:26]
    reg rdReg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Executer.scala 49:22]
    reg funct3Reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Executer.scala 50:26]
    reg rs1Reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Executer.scala 51:23]
    reg rs2Reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Executer.scala 52:23]
    reg imm_IReg : SInt<12>, clock with :
      reset => (reset, asSInt(UInt<12>("h0"))) @[Executer.scala 53:25]
    reg imm_SReg : SInt<12>, clock with :
      reset => (reset, asSInt(UInt<12>("h0"))) @[Executer.scala 54:25]
    reg imm_BReg : SInt<13>, clock with :
      reset => (reset, asSInt(UInt<13>("h0"))) @[Executer.scala 55:25]
    reg imm_UReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Executer.scala 56:25]
    reg imm_JReg : SInt<21>, clock with :
      reset => (reset, asSInt(UInt<21>("h0"))) @[Executer.scala 57:25]
    reg funct7Reg : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[Executer.scala 58:26]
    reg pcReg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Executer.scala 60:22]
    reg branchEnableReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Executer.scala 61:32]
    reg branchOutReg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Executer.scala 62:29]
    reg rdLastRegEx : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Executer.scala 64:28]
    reg aluLastRegEx : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Executer.scala 65:29]
    reg ALUreg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Executer.scala 68:23]
    opcodeReg <= io.opcode @[Executer.scala 71:13]
    rdReg <= io.rdInput @[Executer.scala 72:9]
    funct3Reg <= io.funct3 @[Executer.scala 73:13]
    rs1Reg <= io.rs1 @[Executer.scala 74:10]
    rs2Reg <= io.rs2 @[Executer.scala 75:10]
    imm_IReg <= io.imm_I @[Executer.scala 76:12]
    imm_SReg <= io.imm_S @[Executer.scala 77:12]
    imm_BReg <= io.imm_B @[Executer.scala 78:12]
    imm_UReg <= io.imm_U @[Executer.scala 79:12]
    imm_JReg <= io.imm_J @[Executer.scala 80:12]
    funct7Reg <= io.funct7 @[Executer.scala 81:13]
    io.funct7out <= funct7Reg @[Executer.scala 82:16]
    io.funct3out <= funct3Reg @[Executer.scala 83:16]
    pcReg <= io.pcIn @[Executer.scala 87:9]
    branchEnableReg <= UInt<1>("h0") @[Executer.scala 88:19]
    node _rs1Wire_T = eq(rdLastRegEx, rs1Reg) @[Executer.scala 90:33]
    node _rs1Wire_T_1 = eq(io.rdLastRegMemIn, rs1Reg) @[Executer.scala 90:81]
    node _rs1Wire_T_2 = eq(io.rdLoadRegMemIn, rs1Reg) @[Executer.scala 90:132]
    node _rs1Wire_T_3 = and(io.loadEnable, _rs1Wire_T_2) @[Executer.scala 90:111]
    node _rs1Wire_T_4 = mux(_rs1Wire_T_3, io.aluLoadRegMemIn, io.aluLastRegMemIn) @[Executer.scala 90:96]
    node _rs1Wire_T_5 = mux(_rs1Wire_T_1, _rs1Wire_T_4, io.x[rs1Reg]) @[Executer.scala 90:62]
    node rs1Wire = mux(_rs1Wire_T, aluLastRegEx, _rs1Wire_T_5) @[Executer.scala 90:20]
    node _rs2Wire_T = eq(rdLastRegEx, rs2Reg) @[Executer.scala 91:33]
    node _rs2Wire_T_1 = eq(io.rdLastRegMemIn, rs2Reg) @[Executer.scala 91:81]
    node _rs2Wire_T_2 = eq(io.rdLoadRegMemIn, rs2Reg) @[Executer.scala 91:132]
    node _rs2Wire_T_3 = and(io.loadEnable, _rs2Wire_T_2) @[Executer.scala 91:111]
    node _rs2Wire_T_4 = mux(_rs2Wire_T_3, io.aluLoadRegMemIn, io.aluLastRegMemIn) @[Executer.scala 91:96]
    node _rs2Wire_T_5 = mux(_rs2Wire_T_1, _rs2Wire_T_4, io.x[rs2Reg]) @[Executer.scala 91:62]
    node rs2Wire = mux(_rs2Wire_T, aluLastRegEx, _rs2Wire_T_5) @[Executer.scala 91:20]
    branchOutReg <= pcReg @[Executer.scala 95:16]
    io.imm <= imm_IReg @[Executer.scala 96:10]
    io.operand1 <= rs1Wire @[Executer.scala 98:15]
    io.operand2 <= asSInt(UInt<1>("h0")) @[Executer.scala 99:15]
    io.group <= UInt<1>("h0") @[Executer.scala 100:12]
    node _T = eq(UInt<6>("h33"), opcodeReg) @[Executer.scala 101:21]
    when _T : @[Executer.scala 101:21]
      io.operand2 <= rs2Wire @[Executer.scala 103:19]
      io.group <= UInt<1>("h1") @[Executer.scala 104:16]
    else :
      node _T_1 = eq(UInt<5>("h13"), opcodeReg) @[Executer.scala 101:21]
      when _T_1 : @[Executer.scala 101:21]
        io.group <= UInt<1>("h1") @[Executer.scala 107:16]
        io.operand2 <= imm_IReg @[Executer.scala 108:19]
        node _T_2 = eq(UInt<1>("h1"), funct3Reg) @[Executer.scala 109:25]
        when _T_2 : @[Executer.scala 109:25]
          node _io_operand2_T = asSInt(rs2Reg) @[Executer.scala 111:33]
          io.operand2 <= _io_operand2_T @[Executer.scala 111:23]
        else :
          node _T_3 = eq(UInt<3>("h5"), funct3Reg) @[Executer.scala 109:25]
          when _T_3 : @[Executer.scala 109:25]
            node _io_operand2_T_1 = asSInt(rs2Reg) @[Executer.scala 114:33]
            io.operand2 <= _io_operand2_T_1 @[Executer.scala 114:23]
      else :
        node _T_4 = eq(UInt<2>("h3"), opcodeReg) @[Executer.scala 101:21]
        when _T_4 : @[Executer.scala 101:21]
          io.group <= UInt<2>("h2") @[Executer.scala 119:16]
          io.operand2 <= rs2Wire @[Executer.scala 120:19]
          io.imm <= imm_IReg @[Executer.scala 121:14]
        else :
          node _T_5 = eq(UInt<6>("h23"), opcodeReg) @[Executer.scala 101:21]
          when _T_5 : @[Executer.scala 101:21]
            io.group <= UInt<2>("h3") @[Executer.scala 124:16]
            io.operand2 <= rs2Wire @[Executer.scala 125:19]
            io.imm <= imm_SReg @[Executer.scala 126:14]
          else :
            node _T_6 = eq(UInt<7>("h63"), opcodeReg) @[Executer.scala 101:21]
            when _T_6 : @[Executer.scala 101:21]
              io.group <= UInt<3>("h4") @[Executer.scala 129:16]
              io.operand2 <= rs2Wire @[Executer.scala 130:19]
              io.imm <= imm_BReg @[Executer.scala 131:14]
            else :
              node _T_7 = eq(UInt<7>("h6f"), opcodeReg) @[Executer.scala 101:21]
              when _T_7 : @[Executer.scala 101:21]
                io.group <= UInt<3>("h5") @[Executer.scala 134:16]
                io.imm <= imm_JReg @[Executer.scala 135:14]
              else :
                node _T_8 = eq(UInt<7>("h67"), opcodeReg) @[Executer.scala 101:21]
                when _T_8 : @[Executer.scala 101:21]
                  io.group <= UInt<3>("h6") @[Executer.scala 138:16]
                  io.imm <= imm_IReg @[Executer.scala 139:14]
                else :
                  node _T_9 = eq(UInt<6>("h37"), opcodeReg) @[Executer.scala 101:21]
                  when _T_9 : @[Executer.scala 101:21]
                    io.group <= UInt<3>("h7") @[Executer.scala 142:16]
                    node _io_imm_T = asSInt(imm_UReg) @[Executer.scala 143:26]
                    io.imm <= _io_imm_T @[Executer.scala 143:14]
                  else :
                    node _T_10 = eq(UInt<5>("h17"), opcodeReg) @[Executer.scala 101:21]
                    when _T_10 : @[Executer.scala 101:21]
                      io.group <= UInt<4>("h8") @[Executer.scala 146:16]
                      node _io_imm_T_1 = asSInt(imm_UReg) @[Executer.scala 147:26]
                      io.imm <= _io_imm_T_1 @[Executer.scala 147:14]
    io.rdOutput <= rdReg @[Executer.scala 151:15]
    rdLastRegEx <= io.rdOutput @[Executer.scala 153:15]
    aluLastRegEx <= io.ALUIn @[Executer.scala 154:16]
    io.pcOut <= pcReg @[Executer.scala 157:12]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip funct3 : UInt<3>, flip funct7 : UInt<7>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip imm : SInt<32>, flip PC : SInt<32>, flip group : UInt<2>, flip operand2 : SInt<32>, flip operand1 : SInt<32>, branchOut : SInt<32>, branchEnable : UInt<1>, ALUout : SInt<32>, pcOut : SInt<32>, rdAddr : UInt<10>, wrAddr : UInt<10>, wrEna : UInt<1>, rdEna : UInt<1>, memOp : UInt<3>}

    io.wrEna <= UInt<1>("h0") @[ALU.scala 50:12]
    io.rdEna <= UInt<1>("h0") @[ALU.scala 51:12]
    io.rdAddr <= UInt<1>("h0") @[ALU.scala 52:13]
    io.wrAddr <= UInt<1>("h0") @[ALU.scala 53:13]
    io.memOp <= UInt<1>("h0") @[ALU.scala 54:12]
    io.ALUout <= asSInt(UInt<1>("h0")) @[ALU.scala 56:13]
    io.branchOut <= asSInt(UInt<1>("h0")) @[ALU.scala 57:16]
    io.branchEnable <= UInt<1>("h0") @[ALU.scala 58:19]
    io.pcOut <= io.PC @[ALU.scala 59:12]
    node _T = eq(UInt<1>("h1"), io.group) @[ALU.scala 62:17]
    when _T : @[ALU.scala 62:17]
      node _T_1 = eq(UInt<1>("h0"), io.funct3) @[ALU.scala 64:22]
      when _T_1 : @[ALU.scala 64:22]
        node _T_2 = eq(UInt<1>("h0"), io.funct7) @[ALU.scala 66:26]
        when _T_2 : @[ALU.scala 66:26]
          node _io_ALUout_T = add(io.operand1, io.operand2) @[ALU.scala 68:44]
          node _io_ALUout_T_1 = tail(_io_ALUout_T, 1) @[ALU.scala 68:44]
          node _io_ALUout_T_2 = asSInt(_io_ALUout_T_1) @[ALU.scala 68:44]
          io.ALUout <= _io_ALUout_T_2 @[ALU.scala 68:25]
        else :
          node _T_3 = eq(UInt<6>("h20"), io.funct7) @[ALU.scala 66:26]
          when _T_3 : @[ALU.scala 66:26]
            node _io_ALUout_T_3 = sub(io.operand1, io.operand2) @[ALU.scala 71:44]
            node _io_ALUout_T_4 = tail(_io_ALUout_T_3, 1) @[ALU.scala 71:44]
            node _io_ALUout_T_5 = asSInt(_io_ALUout_T_4) @[ALU.scala 71:44]
            io.ALUout <= _io_ALUout_T_5 @[ALU.scala 71:25]
      else :
        node _T_4 = eq(UInt<3>("h4"), io.funct3) @[ALU.scala 64:22]
        when _T_4 : @[ALU.scala 64:22]
          node _io_ALUout_T_6 = xor(io.operand1, io.operand2) @[ALU.scala 76:40]
          node _io_ALUout_T_7 = asSInt(_io_ALUout_T_6) @[ALU.scala 76:40]
          io.ALUout <= _io_ALUout_T_7 @[ALU.scala 76:21]
        else :
          node _T_5 = eq(UInt<3>("h6"), io.funct3) @[ALU.scala 64:22]
          when _T_5 : @[ALU.scala 64:22]
            node _io_ALUout_T_8 = or(io.operand1, io.operand2) @[ALU.scala 79:40]
            node _io_ALUout_T_9 = asSInt(_io_ALUout_T_8) @[ALU.scala 79:40]
            io.ALUout <= _io_ALUout_T_9 @[ALU.scala 79:21]
          else :
            node _T_6 = eq(UInt<3>("h7"), io.funct3) @[ALU.scala 64:22]
            when _T_6 : @[ALU.scala 64:22]
              node _io_ALUout_T_10 = and(io.operand1, io.operand2) @[ALU.scala 82:40]
              node _io_ALUout_T_11 = asSInt(_io_ALUout_T_10) @[ALU.scala 82:40]
              io.ALUout <= _io_ALUout_T_11 @[ALU.scala 82:21]
            else :
              node _T_7 = eq(UInt<1>("h1"), io.funct3) @[ALU.scala 64:22]
              when _T_7 : @[ALU.scala 64:22]
                skip
              else :
                node _T_8 = eq(UInt<3>("h5"), io.funct3) @[ALU.scala 64:22]
                when _T_8 : @[ALU.scala 64:22]
                  node _T_9 = eq(UInt<1>("h0"), io.funct7) @[ALU.scala 89:26]
                  when _T_9 : @[ALU.scala 89:26]
                    node _io_ALUout_T_12 = asUInt(io.operand1) @[ALU.scala 91:38]
                    node _io_ALUout_T_13 = asUInt(io.operand2) @[ALU.scala 91:57]
                    node _io_ALUout_T_14 = dshr(_io_ALUout_T_12, _io_ALUout_T_13) @[ALU.scala 91:45]
                    node _io_ALUout_T_15 = asSInt(_io_ALUout_T_14) @[ALU.scala 91:65]
                    io.ALUout <= _io_ALUout_T_15 @[ALU.scala 91:25]
                  else :
                    node _T_10 = eq(UInt<6>("h20"), io.funct7) @[ALU.scala 89:26]
                    when _T_10 : @[ALU.scala 89:26]
                      node _io_ALUout_T_16 = asUInt(io.operand2) @[ALU.scala 94:49]
                      node _io_ALUout_T_17 = dshr(io.operand1, _io_ALUout_T_16) @[ALU.scala 94:37]
                      io.ALUout <= _io_ALUout_T_17 @[ALU.scala 94:25]
                else :
                  node _T_11 = eq(UInt<2>("h2"), io.funct3) @[ALU.scala 64:22]
                  when _T_11 : @[ALU.scala 64:22]
                    node _io_ALUout_T_18 = lt(io.operand1, io.operand2) @[ALU.scala 99:44]
                    node _io_ALUout_T_19 = mux(_io_ALUout_T_18, asSInt(UInt<2>("h1")), asSInt(UInt<1>("h0"))) @[ALU.scala 99:27]
                    io.ALUout <= _io_ALUout_T_19 @[ALU.scala 99:21]
                  else :
                    node _T_12 = eq(UInt<2>("h3"), io.funct3) @[ALU.scala 64:22]
                    when _T_12 : @[ALU.scala 64:22]
                      node _io_ALUout_T_20 = asUInt(io.operand1) @[ALU.scala 102:37]
                      node _io_ALUout_T_21 = asUInt(io.operand2) @[ALU.scala 102:55]
                      node _io_ALUout_T_22 = lt(_io_ALUout_T_20, _io_ALUout_T_21) @[ALU.scala 102:44]
                      node _io_ALUout_T_23 = mux(_io_ALUout_T_22, asSInt(UInt<2>("h1")), asSInt(UInt<1>("h0"))) @[ALU.scala 102:27]
                      io.ALUout <= _io_ALUout_T_23 @[ALU.scala 102:21]
    else :
      node _T_13 = eq(UInt<2>("h2"), io.group) @[ALU.scala 62:17]
      when _T_13 : @[ALU.scala 62:17]
        node _io_rdAddr_T = add(io.operand1, io.imm) @[ALU.scala 107:30]
        node _io_rdAddr_T_1 = tail(_io_rdAddr_T, 1) @[ALU.scala 107:30]
        node _io_rdAddr_T_2 = asSInt(_io_rdAddr_T_1) @[ALU.scala 107:30]
        node _io_rdAddr_T_3 = bits(_io_rdAddr_T_2, 9, 0) @[ALU.scala 107:36]
        io.rdAddr <= _io_rdAddr_T_3 @[ALU.scala 107:17]
        io.rdEna <= UInt<1>("h1") @[ALU.scala 108:16]
        node _T_14 = eq(UInt<1>("h0"), io.funct3) @[ALU.scala 109:22]
        when _T_14 : @[ALU.scala 109:22]
          io.memOp <= UInt<1>("h1") @[ALU.scala 112:20]
        else :
          node _T_15 = eq(UInt<1>("h1"), io.funct3) @[ALU.scala 109:22]
          when _T_15 : @[ALU.scala 109:22]
            io.memOp <= UInt<2>("h2") @[ALU.scala 115:20]
          else :
            node _T_16 = eq(UInt<2>("h2"), io.funct3) @[ALU.scala 109:22]
            when _T_16 : @[ALU.scala 109:22]
              io.memOp <= UInt<2>("h3") @[ALU.scala 118:20]
            else :
              node _T_17 = eq(UInt<3>("h4"), io.funct3) @[ALU.scala 109:22]
              when _T_17 : @[ALU.scala 109:22]
                io.memOp <= UInt<3>("h4") @[ALU.scala 121:20]
              else :
                node _T_18 = eq(UInt<3>("h5"), io.funct3) @[ALU.scala 109:22]
                when _T_18 : @[ALU.scala 109:22]
                  io.memOp <= UInt<3>("h5") @[ALU.scala 124:20]
      else :
        node _T_19 = eq(UInt<2>("h3"), io.group) @[ALU.scala 62:17]
        when _T_19 : @[ALU.scala 62:17]
          io.ALUout <= io.operand2 @[ALU.scala 130:17]
          node _io_wrAddr_T = add(io.operand1, io.imm) @[ALU.scala 131:30]
          node _io_wrAddr_T_1 = tail(_io_wrAddr_T, 1) @[ALU.scala 131:30]
          node _io_wrAddr_T_2 = asSInt(_io_wrAddr_T_1) @[ALU.scala 131:30]
          node _io_wrAddr_T_3 = bits(_io_wrAddr_T_2, 9, 0) @[ALU.scala 131:36]
          io.wrAddr <= _io_wrAddr_T_3 @[ALU.scala 131:17]
          io.wrEna <= UInt<1>("h1") @[ALU.scala 132:16]
          node _T_20 = eq(UInt<1>("h0"), io.funct3) @[ALU.scala 133:22]
          when _T_20 : @[ALU.scala 133:22]
            io.memOp <= UInt<1>("h1") @[ALU.scala 135:20]
          else :
            node _T_21 = eq(UInt<1>("h1"), io.funct3) @[ALU.scala 133:22]
            when _T_21 : @[ALU.scala 133:22]
              io.memOp <= UInt<2>("h2") @[ALU.scala 138:20]
            else :
              node _T_22 = eq(UInt<2>("h2"), io.funct3) @[ALU.scala 133:22]
              when _T_22 : @[ALU.scala 133:22]
                io.memOp <= UInt<2>("h3") @[ALU.scala 141:20]
        else :
          node _T_23 = eq(UInt<3>("h4"), io.group) @[ALU.scala 62:17]
          when _T_23 : @[ALU.scala 62:17]
            node _T_24 = eq(UInt<1>("h0"), io.funct3) @[ALU.scala 147:22]
            when _T_24 : @[ALU.scala 147:22]
              node _T_25 = eq(io.operand1, io.operand2) @[ALU.scala 149:25]
              when _T_25 : @[ALU.scala 149:39]
                io.branchEnable <= UInt<1>("h1") @[ALU.scala 150:29]
                node _io_branchOut_T = add(io.PC, io.imm) @[ALU.scala 151:32]
                node _io_branchOut_T_1 = tail(_io_branchOut_T, 1) @[ALU.scala 151:32]
                node _io_branchOut_T_2 = asSInt(_io_branchOut_T_1) @[ALU.scala 151:32]
                node _io_branchOut_T_3 = sub(_io_branchOut_T_2, asSInt(UInt<4>("h4"))) @[ALU.scala 151:38]
                node _io_branchOut_T_4 = tail(_io_branchOut_T_3, 1) @[ALU.scala 151:38]
                node _io_branchOut_T_5 = asSInt(_io_branchOut_T_4) @[ALU.scala 151:38]
                io.branchOut <= _io_branchOut_T_5 @[ALU.scala 151:26]
            else :
              node _T_26 = eq(UInt<1>("h1"), io.funct3) @[ALU.scala 147:22]
              when _T_26 : @[ALU.scala 147:22]
                node _T_27 = neq(io.operand1, io.operand2) @[ALU.scala 155:25]
                when _T_27 : @[ALU.scala 155:39]
                  io.branchEnable <= UInt<1>("h1") @[ALU.scala 156:29]
                  node _io_branchOut_T_6 = add(io.PC, io.imm) @[ALU.scala 157:32]
                  node _io_branchOut_T_7 = tail(_io_branchOut_T_6, 1) @[ALU.scala 157:32]
                  node _io_branchOut_T_8 = asSInt(_io_branchOut_T_7) @[ALU.scala 157:32]
                  node _io_branchOut_T_9 = sub(_io_branchOut_T_8, asSInt(UInt<4>("h4"))) @[ALU.scala 157:38]
                  node _io_branchOut_T_10 = tail(_io_branchOut_T_9, 1) @[ALU.scala 157:38]
                  node _io_branchOut_T_11 = asSInt(_io_branchOut_T_10) @[ALU.scala 157:38]
                  io.branchOut <= _io_branchOut_T_11 @[ALU.scala 157:26]
              else :
                node _T_28 = eq(UInt<3>("h4"), io.funct3) @[ALU.scala 147:22]
                when _T_28 : @[ALU.scala 147:22]
                  node _T_29 = lt(io.operand1, io.operand2) @[ALU.scala 162:25]
                  when _T_29 : @[ALU.scala 162:37]
                    io.branchEnable <= UInt<1>("h1") @[ALU.scala 163:29]
                    node _io_branchOut_T_12 = add(io.PC, io.imm) @[ALU.scala 164:32]
                    node _io_branchOut_T_13 = tail(_io_branchOut_T_12, 1) @[ALU.scala 164:32]
                    node _io_branchOut_T_14 = asSInt(_io_branchOut_T_13) @[ALU.scala 164:32]
                    node _io_branchOut_T_15 = sub(_io_branchOut_T_14, asSInt(UInt<4>("h4"))) @[ALU.scala 164:38]
                    node _io_branchOut_T_16 = tail(_io_branchOut_T_15, 1) @[ALU.scala 164:38]
                    node _io_branchOut_T_17 = asSInt(_io_branchOut_T_16) @[ALU.scala 164:38]
                    io.branchOut <= _io_branchOut_T_17 @[ALU.scala 164:26]
                else :
                  node _T_30 = eq(UInt<3>("h5"), io.funct3) @[ALU.scala 147:22]
                  when _T_30 : @[ALU.scala 147:22]
                    node _T_31 = geq(io.operand1, io.operand2) @[ALU.scala 168:25]
                    when _T_31 : @[ALU.scala 168:38]
                      io.branchEnable <= UInt<1>("h1") @[ALU.scala 169:29]
                      node _io_branchOut_T_18 = add(io.PC, io.imm) @[ALU.scala 170:32]
                      node _io_branchOut_T_19 = tail(_io_branchOut_T_18, 1) @[ALU.scala 170:32]
                      node _io_branchOut_T_20 = asSInt(_io_branchOut_T_19) @[ALU.scala 170:32]
                      node _io_branchOut_T_21 = sub(_io_branchOut_T_20, asSInt(UInt<4>("h4"))) @[ALU.scala 170:38]
                      node _io_branchOut_T_22 = tail(_io_branchOut_T_21, 1) @[ALU.scala 170:38]
                      node _io_branchOut_T_23 = asSInt(_io_branchOut_T_22) @[ALU.scala 170:38]
                      io.branchOut <= _io_branchOut_T_23 @[ALU.scala 170:26]
                  else :
                    node _T_32 = eq(UInt<3>("h6"), io.funct3) @[ALU.scala 147:22]
                    when _T_32 : @[ALU.scala 147:22]
                      node _T_33 = lt(io.operand1, io.operand2) @[ALU.scala 175:27]
                      when _T_33 : @[ALU.scala 175:39]
                        io.branchEnable <= UInt<1>("h1") @[ALU.scala 176:31]
                        node _io_branchOut_T_24 = add(io.PC, io.imm) @[ALU.scala 177:34]
                        node _io_branchOut_T_25 = tail(_io_branchOut_T_24, 1) @[ALU.scala 177:34]
                        node _io_branchOut_T_26 = asSInt(_io_branchOut_T_25) @[ALU.scala 177:34]
                        node _io_branchOut_T_27 = sub(_io_branchOut_T_26, asSInt(UInt<4>("h4"))) @[ALU.scala 177:40]
                        node _io_branchOut_T_28 = tail(_io_branchOut_T_27, 1) @[ALU.scala 177:40]
                        node _io_branchOut_T_29 = asSInt(_io_branchOut_T_28) @[ALU.scala 177:40]
                        io.branchOut <= _io_branchOut_T_29 @[ALU.scala 177:28]
                    else :
                      node _T_34 = eq(UInt<3>("h7"), io.funct3) @[ALU.scala 147:22]
                      when _T_34 : @[ALU.scala 147:22]
                        node _T_35 = asUInt(io.operand1) @[ALU.scala 181:27]
                        node _T_36 = asUInt(io.operand2) @[ALU.scala 181:46]
                        node _T_37 = geq(_T_35, _T_36) @[ALU.scala 181:34]
                        when _T_37 : @[ALU.scala 181:54]
                          io.branchEnable <= UInt<1>("h1") @[ALU.scala 182:31]
                          node _io_branchOut_T_30 = add(io.PC, io.imm) @[ALU.scala 183:34]
                          node _io_branchOut_T_31 = tail(_io_branchOut_T_30, 1) @[ALU.scala 183:34]
                          node _io_branchOut_T_32 = asSInt(_io_branchOut_T_31) @[ALU.scala 183:34]
                          node _io_branchOut_T_33 = sub(_io_branchOut_T_32, asSInt(UInt<4>("h4"))) @[ALU.scala 183:40]
                          node _io_branchOut_T_34 = tail(_io_branchOut_T_33, 1) @[ALU.scala 183:40]
                          node _io_branchOut_T_35 = asSInt(_io_branchOut_T_34) @[ALU.scala 183:40]
                          io.branchOut <= _io_branchOut_T_35 @[ALU.scala 183:28]
          else :
            node _T_38 = eq(UInt<3>("h5"), io.group) @[ALU.scala 62:17]
            when _T_38 : @[ALU.scala 62:17]
              node _io_branchOut_T_36 = add(io.PC, io.imm) @[ALU.scala 190:26]
              node _io_branchOut_T_37 = tail(_io_branchOut_T_36, 1) @[ALU.scala 190:26]
              node _io_branchOut_T_38 = asSInt(_io_branchOut_T_37) @[ALU.scala 190:26]
              io.branchOut <= _io_branchOut_T_38 @[ALU.scala 190:20]
            else :
              node _T_39 = eq(UInt<3>("h6"), io.group) @[ALU.scala 62:17]
              when _T_39 : @[ALU.scala 62:17]
                node _io_branchOut_T_39 = add(io.operand1, io.imm) @[ALU.scala 194:32]
                node _io_branchOut_T_40 = tail(_io_branchOut_T_39, 1) @[ALU.scala 194:32]
                node _io_branchOut_T_41 = asSInt(_io_branchOut_T_40) @[ALU.scala 194:32]
                io.branchOut <= _io_branchOut_T_41 @[ALU.scala 194:20]
              else :
                node _T_40 = eq(UInt<3>("h7"), io.group) @[ALU.scala 62:17]
                when _T_40 : @[ALU.scala 62:17]
                  node _io_ALUout_T_24 = bits(io.imm, 19, 0) @[ALU.scala 197:26]
                  node _io_ALUout_T_25 = shl(_io_ALUout_T_24, 12) @[ALU.scala 197:34]
                  node _io_ALUout_T_26 = asSInt(_io_ALUout_T_25) @[ALU.scala 197:41]
                  io.ALUout <= _io_ALUout_T_26 @[ALU.scala 197:17]
                else :
                  node _T_41 = eq(UInt<4>("h8"), io.group) @[ALU.scala 62:17]
                  when _T_41 : @[ALU.scala 62:17]
                    node _io_ALUout_T_27 = bits(io.imm, 19, 0) @[ALU.scala 200:31]
                    node _io_ALUout_T_28 = shl(_io_ALUout_T_27, 12) @[ALU.scala 200:39]
                    node _io_ALUout_T_29 = asSInt(_io_ALUout_T_28) @[ALU.scala 200:46]
                    node _io_ALUout_T_30 = add(io.PC, _io_ALUout_T_29) @[ALU.scala 200:23]
                    node _io_ALUout_T_31 = tail(_io_ALUout_T_30, 1) @[ALU.scala 200:23]
                    node _io_ALUout_T_32 = asSInt(_io_ALUout_T_31) @[ALU.scala 200:23]
                    io.ALUout <= _io_ALUout_T_32 @[ALU.scala 200:17]


  module Memorizer :
    input clock : Clock
    input reset : Reset
    output io : { flip ALUinput : SInt<32>, flip rdInput : UInt<5>, flip rdAddr : UInt<10>, flip wrAddr : UInt<10>, flip wrData : UInt<32>, flip wrEna : UInt<1>, flip rdEna : UInt<1>, flip memOp : UInt<3>, rdLastRegMemOut : UInt<5>, aluLastRegMemOut : SInt<32>, rdLoadRegMemOut : UInt<5>, aluLoadRegMemOut : SInt<32>, loadEnabler : UInt<1>, rdData : SInt<32>, rdEnaOut : UInt<1>, wrEnaOut : UInt<1>, rdOutput : UInt<5>, ALUoutput : SInt<32>}

    reg rdReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 37:22]
    rdReg <= io.rdInput @[Memorizer.scala 37:22]
    reg ALUreg : SInt, clock with :
      reset => (reset, asSInt(UInt<1>("h0"))) @[Memorizer.scala 38:23]
    ALUreg <= io.ALUinput @[Memorizer.scala 38:23]
    io.rdOutput <= rdReg @[Memorizer.scala 39:15]
    io.ALUoutput <= ALUreg @[Memorizer.scala 40:16]
    reg rdLastRegMem : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Memorizer.scala 43:29]
    reg aluLastRegMem : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Memorizer.scala 44:30]
    rdLastRegMem <= io.rdOutput @[Memorizer.scala 46:16]
    aluLastRegMem <= io.ALUoutput @[Memorizer.scala 47:17]
    io.rdLastRegMemOut <= rdLastRegMem @[Memorizer.scala 48:22]
    io.aluLastRegMemOut <= aluLastRegMem @[Memorizer.scala 49:23]
    reg wrEnaReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 51:25]
    wrEnaReg <= io.wrEna @[Memorizer.scala 51:25]
    reg rdEnaReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 52:25]
    rdEnaReg <= io.rdEna @[Memorizer.scala 52:25]
    reg wrDataReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 53:26]
    wrDataReg <= io.wrData @[Memorizer.scala 53:26]
    reg rdAddrReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 54:26]
    rdAddrReg <= io.rdAddr @[Memorizer.scala 54:26]
    reg wrAddrReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 55:26]
    wrAddrReg <= io.wrAddr @[Memorizer.scala 55:26]
    reg memOpReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 56:25]
    memOpReg <= io.memOp @[Memorizer.scala 56:25]
    smem mem : UInt<8> [1024] @[Memorizer.scala 57:24]
    io.wrEnaOut <= wrEnaReg @[Memorizer.scala 58:15]
    io.rdEnaOut <= rdEnaReg @[Memorizer.scala 59:15]
    wire _io_rdData_WIRE : UInt @[Memorizer.scala 69:24]
    _io_rdData_WIRE is invalid @[Memorizer.scala 69:24]
    when UInt<1>("h1") : @[Memorizer.scala 69:24]
      _io_rdData_WIRE <= io.rdAddr @[Memorizer.scala 69:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<10>("h0")) @[Memorizer.scala 69:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 9, 0) @[Memorizer.scala 69:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[Memorizer.scala 69:24]
    node _io_rdData_T_2 = asSInt(io_rdData_MPORT) @[Memorizer.scala 69:36]
    io.rdData <= _io_rdData_T_2 @[Memorizer.scala 69:13]
    io.rdLoadRegMemOut <= UInt<1>("h0") @[Memorizer.scala 70:22]
    io.aluLoadRegMemOut <= asSInt(UInt<1>("h0")) @[Memorizer.scala 71:23]
    node _T = eq(UInt<1>("h0"), memOpReg) @[Memorizer.scala 72:20]
    when _T : @[Memorizer.scala 72:20]
      io.rdData <= asSInt(UInt<4>("h4")) @[Memorizer.scala 74:17]
    else :
      node _T_1 = eq(UInt<1>("h1"), memOpReg) @[Memorizer.scala 72:20]
      when _T_1 : @[Memorizer.scala 72:20]
        io.rdData <= asSInt(UInt<1>("h0")) @[Memorizer.scala 77:17]
        when wrEnaReg : @[Memorizer.scala 78:22]
          skip
      else :
        node _T_2 = eq(UInt<2>("h2"), memOpReg) @[Memorizer.scala 72:20]
        when _T_2 : @[Memorizer.scala 72:20]
          when wrEnaReg : @[Memorizer.scala 84:22]
            skip
        else :
          node _T_3 = eq(UInt<2>("h3"), memOpReg) @[Memorizer.scala 72:20]
          when _T_3 : @[Memorizer.scala 72:20]
            when wrEnaReg : @[Memorizer.scala 91:22]
              skip
          else :
            node _T_4 = eq(UInt<3>("h4"), memOpReg) @[Memorizer.scala 72:20]
            when _T_4 : @[Memorizer.scala 72:20]
              skip
            else :
              node _T_5 = eq(UInt<3>("h5"), memOpReg) @[Memorizer.scala 72:20]
              when _T_5 : @[Memorizer.scala 72:20]
                skip
    reg rdLoadRegger : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Memorizer.scala 106:29]
    reg aluLoadRegger : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Memorizer.scala 107:30]
    reg enabler : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memorizer.scala 108:24]
    enabler <= rdEnaReg @[Memorizer.scala 109:11]
    io.loadEnabler <= enabler @[Memorizer.scala 110:18]
    rdLoadRegger <= rdReg @[Memorizer.scala 111:16]
    aluLoadRegger <= io.rdData @[Memorizer.scala 112:16]
    io.rdLoadRegMemOut <= rdLoadRegger @[Memorizer.scala 113:22]
    io.aluLoadRegMemOut <= aluLoadRegger @[Memorizer.scala 114:23]

  module Write_backer :
    input clock : Clock
    input reset : Reset
    output io : { flip ALUinput : SInt<32>, ALUoutput : SInt<32>, flip rdInput : UInt<5>, rdOut : UInt<5>, flip rdEnaIn : UInt<1>, flip wrEnaIn : UInt<1>, flip rdData : SInt<32>}

    reg rdReg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Write_backer.scala 15:22]
    reg ALUreg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Write_backer.scala 16:23]
    reg rdDataReg : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[Write_backer.scala 17:26]
    reg rdEnaInReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Write_backer.scala 18:27]
    reg wrEnaInReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Write_backer.scala 19:27]
    rdReg <= io.rdInput @[Write_backer.scala 21:9]
    ALUreg <= io.ALUinput @[Write_backer.scala 22:10]
    rdDataReg <= io.rdData @[Write_backer.scala 23:13]
    rdEnaInReg <= io.rdEnaIn @[Write_backer.scala 24:14]
    wrEnaInReg <= io.wrEnaIn @[Write_backer.scala 25:14]
    node _io_ALUoutput_T = mux(rdEnaInReg, rdDataReg, ALUreg) @[Write_backer.scala 28:22]
    io.ALUoutput <= _io_ALUoutput_T @[Write_backer.scala 28:16]
    io.rdOut <= rdReg @[Write_backer.scala 29:12]
    node _T = eq(rdReg, UInt<1>("h0")) @[Write_backer.scala 31:28]
    node _T_1 = or(wrEnaInReg, _T) @[Write_backer.scala 31:19]
    node _T_2 = eq(rdReg, UInt<6>("h20")) @[Write_backer.scala 31:45]
    node _T_3 = or(_T_1, _T_2) @[Write_backer.scala 31:36]
    when _T_3 : @[Write_backer.scala 31:55]
      io.ALUoutput <= asSInt(UInt<1>("h0")) @[Write_backer.scala 32:18]
      io.rdOut <= UInt<1>("h0") @[Write_backer.scala 33:14]


  module Food :
    input clock : Clock
    input reset : UInt<1>
    output io : { led : UInt<1>}

    wire _x_WIRE : SInt<32>[32] @[Food.scala 13:26]
    _x_WIRE[0] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[1] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[2] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[3] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[4] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[5] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[6] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[7] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[8] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[9] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[10] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[11] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[12] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[13] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[14] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[15] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[16] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[17] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[18] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[19] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[20] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[21] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[22] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[23] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[24] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[25] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[26] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[27] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[28] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[29] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[30] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    _x_WIRE[31] <= asSInt(UInt<32>("h0")) @[Food.scala 13:26]
    reg x : SInt<32>[32], clock with :
      reset => (reset, _x_WIRE) @[Food.scala 13:18]
    inst fetcher of Fetcher @[Food.scala 14:29]
    fetcher.clock <= clock
    fetcher.reset <= reset
    inst decoder of Decoder @[Food.scala 15:29]
    decoder.clock <= clock
    decoder.reset <= reset
    inst executer of Executer @[Food.scala 16:29]
    executer.clock <= clock
    executer.reset <= reset
    inst ALU of ALU @[Food.scala 17:29]
    ALU.clock <= clock
    ALU.reset <= reset
    inst memorizer of Memorizer @[Food.scala 18:29]
    memorizer.clock <= clock
    memorizer.reset <= reset
    inst write_backer of Write_backer @[Food.scala 19:29]
    write_backer.clock <= clock
    write_backer.reset <= reset
    wire _instrReg_WIRE : UInt<32>[12] @[Food.scala 20:38]
    _instrReg_WIRE[0] <= UInt<32>("h200093") @[Food.scala 20:38]
    _instrReg_WIRE[1] <= UInt<32>("h100133") @[Food.scala 20:38]
    _instrReg_WIRE[2] <= UInt<32>("h108663") @[Food.scala 20:38]
    _instrReg_WIRE[3] <= UInt<32>("h13") @[Food.scala 20:38]
    _instrReg_WIRE[4] <= UInt<32>("h13") @[Food.scala 20:38]
    _instrReg_WIRE[5] <= UInt<32>("hffc10193") @[Food.scala 20:38]
    _instrReg_WIRE[6] <= UInt<32>("h40310233") @[Food.scala 20:38]
    _instrReg_WIRE[7] <= UInt<32>("h2182b3") @[Food.scala 20:38]
    _instrReg_WIRE[8] <= UInt<32>("h13") @[Food.scala 20:38]
    _instrReg_WIRE[9] <= UInt<32>("h13") @[Food.scala 20:38]
    _instrReg_WIRE[10] <= UInt<32>("h13") @[Food.scala 20:38]
    _instrReg_WIRE[11] <= UInt<32>("h13") @[Food.scala 20:38]
    reg instrReg : UInt<32>[12], clock with :
      reset => (reset, _instrReg_WIRE) @[Food.scala 20:30]
    fetcher.io.input[0] <= instrReg[0] @[Food.scala 37:23]
    fetcher.io.input[1] <= instrReg[1] @[Food.scala 37:23]
    fetcher.io.input[2] <= instrReg[2] @[Food.scala 37:23]
    fetcher.io.input[3] <= instrReg[3] @[Food.scala 37:23]
    fetcher.io.input[4] <= instrReg[4] @[Food.scala 37:23]
    fetcher.io.input[5] <= instrReg[5] @[Food.scala 37:23]
    fetcher.io.input[6] <= instrReg[6] @[Food.scala 37:23]
    fetcher.io.input[7] <= instrReg[7] @[Food.scala 37:23]
    fetcher.io.input[8] <= instrReg[8] @[Food.scala 37:23]
    fetcher.io.input[9] <= instrReg[9] @[Food.scala 37:23]
    fetcher.io.input[10] <= instrReg[10] @[Food.scala 37:23]
    fetcher.io.input[11] <= instrReg[11] @[Food.scala 37:23]
    decoder.io.instruction <= fetcher.io.instruction @[Food.scala 39:26]
    decoder.io.pcIn <= fetcher.io.pcOut @[Food.scala 41:19]
    executer.io.pcIn <= decoder.io.pcOut @[Food.scala 42:20]
    fetcher.io.branchIn <= ALU.io.branchOut @[Food.scala 43:23]
    fetcher.io.branchEnable <= ALU.io.branchEnable @[Food.scala 44:27]
    decoder.io.rdRegEx <= executer.io.rdOutput @[Food.scala 47:22]
    decoder.io.LoadMemEnable <= ALU.io.rdEna @[Food.scala 49:28]
    fetcher.io.shouldMux <= decoder.io.shouldMux @[Food.scala 51:24]
    executer.io.x[0] <= x[0] @[Food.scala 56:17]
    executer.io.x[1] <= x[1] @[Food.scala 56:17]
    executer.io.x[2] <= x[2] @[Food.scala 56:17]
    executer.io.x[3] <= x[3] @[Food.scala 56:17]
    executer.io.x[4] <= x[4] @[Food.scala 56:17]
    executer.io.x[5] <= x[5] @[Food.scala 56:17]
    executer.io.x[6] <= x[6] @[Food.scala 56:17]
    executer.io.x[7] <= x[7] @[Food.scala 56:17]
    executer.io.x[8] <= x[8] @[Food.scala 56:17]
    executer.io.x[9] <= x[9] @[Food.scala 56:17]
    executer.io.x[10] <= x[10] @[Food.scala 56:17]
    executer.io.x[11] <= x[11] @[Food.scala 56:17]
    executer.io.x[12] <= x[12] @[Food.scala 56:17]
    executer.io.x[13] <= x[13] @[Food.scala 56:17]
    executer.io.x[14] <= x[14] @[Food.scala 56:17]
    executer.io.x[15] <= x[15] @[Food.scala 56:17]
    executer.io.x[16] <= x[16] @[Food.scala 56:17]
    executer.io.x[17] <= x[17] @[Food.scala 56:17]
    executer.io.x[18] <= x[18] @[Food.scala 56:17]
    executer.io.x[19] <= x[19] @[Food.scala 56:17]
    executer.io.x[20] <= x[20] @[Food.scala 56:17]
    executer.io.x[21] <= x[21] @[Food.scala 56:17]
    executer.io.x[22] <= x[22] @[Food.scala 56:17]
    executer.io.x[23] <= x[23] @[Food.scala 56:17]
    executer.io.x[24] <= x[24] @[Food.scala 56:17]
    executer.io.x[25] <= x[25] @[Food.scala 56:17]
    executer.io.x[26] <= x[26] @[Food.scala 56:17]
    executer.io.x[27] <= x[27] @[Food.scala 56:17]
    executer.io.x[28] <= x[28] @[Food.scala 56:17]
    executer.io.x[29] <= x[29] @[Food.scala 56:17]
    executer.io.x[30] <= x[30] @[Food.scala 56:17]
    executer.io.x[31] <= x[31] @[Food.scala 56:17]
    executer.io.opcode <= decoder.io.opcode @[Food.scala 57:22]
    executer.io.rdInput <= decoder.io.rdOutput @[Food.scala 58:23]
    executer.io.rs1 <= decoder.io.rs1 @[Food.scala 59:19]
    executer.io.rs2 <= decoder.io.rs2 @[Food.scala 60:19]
    executer.io.imm_I <= decoder.io.imm_I @[Food.scala 61:21]
    executer.io.imm_B <= decoder.io.imm_B @[Food.scala 62:21]
    executer.io.imm_J <= decoder.io.imm_J @[Food.scala 63:21]
    executer.io.imm_S <= decoder.io.imm_S @[Food.scala 64:21]
    executer.io.imm_U <= decoder.io.imm_U @[Food.scala 65:21]
    executer.io.funct3 <= decoder.io.funct3 @[Food.scala 66:22]
    executer.io.funct7 <= decoder.io.funct7 @[Food.scala 67:22]
    executer.io.rdLastRegMemIn <= memorizer.io.rdLastRegMemOut @[Food.scala 70:30]
    executer.io.aluLastRegMemIn <= memorizer.io.aluLastRegMemOut @[Food.scala 72:31]
    executer.io.rdLoadRegMemIn <= memorizer.io.rdLoadRegMemOut @[Food.scala 74:30]
    executer.io.aluLoadRegMemIn <= memorizer.io.aluLoadRegMemOut @[Food.scala 75:31]
    executer.io.loadEnable <= memorizer.io.loadEnabler @[Food.scala 76:26]
    ALU.io.funct3 <= executer.io.funct3out @[Food.scala 78:17]
    ALU.io.funct7 <= executer.io.funct7out @[Food.scala 79:17]
    ALU.io.rs1 <= decoder.io.rs1 @[Food.scala 80:14]
    ALU.io.rs2 <= decoder.io.rs2 @[Food.scala 81:14]
    ALU.io.PC <= decoder.io.pcOut @[Food.scala 87:13]
    ALU.io.group <= executer.io.group @[Food.scala 88:16]
    ALU.io.operand1 <= executer.io.operand1 @[Food.scala 89:19]
    ALU.io.operand2 <= executer.io.operand2 @[Food.scala 90:19]
    ALU.io.imm <= executer.io.imm @[Food.scala 91:14]
    executer.io.ALUIn <= ALU.io.ALUout @[Food.scala 94:21]
    memorizer.io.memOp <= ALU.io.memOp @[Food.scala 97:22]
    memorizer.io.rdInput <= executer.io.rdOutput @[Food.scala 98:24]
    memorizer.io.ALUinput <= ALU.io.ALUout @[Food.scala 99:25]
    memorizer.io.rdEna <= ALU.io.rdEna @[Food.scala 100:22]
    memorizer.io.wrEna <= ALU.io.wrEna @[Food.scala 101:22]
    memorizer.io.rdAddr <= ALU.io.rdAddr @[Food.scala 102:23]
    memorizer.io.wrAddr <= ALU.io.wrAddr @[Food.scala 103:23]
    node _memorizer_io_wrData_T = asUInt(ALU.io.ALUout) @[Food.scala 104:40]
    memorizer.io.wrData <= _memorizer_io_wrData_T @[Food.scala 104:23]
    write_backer.io.rdData <= memorizer.io.rdData @[Food.scala 109:26]
    write_backer.io.rdEnaIn <= memorizer.io.rdEnaOut @[Food.scala 110:27]
    write_backer.io.rdInput <= memorizer.io.rdOutput @[Food.scala 111:27]
    write_backer.io.ALUinput <= memorizer.io.ALUoutput @[Food.scala 112:28]
    write_backer.io.wrEnaIn <= memorizer.io.wrEnaOut @[Food.scala 113:27]
    x[write_backer.io.rdOut] <= write_backer.io.ALUoutput @[Food.scala 116:28]
    reg cntReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Food.scala 121:23]
    reg blkReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Food.scala 122:23]
    node _cntReg_T = add(cntReg, UInt<1>("h1")) @[Food.scala 124:20]
    node _cntReg_T_1 = tail(_cntReg_T, 1) @[Food.scala 124:20]
    cntReg <= _cntReg_T_1 @[Food.scala 124:10]
    node _T = eq(cntReg, UInt<26>("h2faf07f")) @[Food.scala 125:15]
    when _T : @[Food.scala 125:28]
      cntReg <= UInt<1>("h0") @[Food.scala 126:12]
      node _blkReg_T = not(blkReg) @[Food.scala 127:15]
      blkReg <= _blkReg_T @[Food.scala 127:12]
    io.led <= blkReg @[Food.scala 129:10]

